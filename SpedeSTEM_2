#!/usr/bin/env python -O -t -W all

import argparse
import sys
import os
import shutil
sys.path.insert(0, os.path.abspath(__file__) + '/../src/')
import iterator
import processStemOut
import parseBeast

# todo:
#    - determine default values of arguments
#    - actually run the scripts
#    - determine which combinations of arguments are required with others
#    - ability to handle multiple types of settings files/associations files

def parseArgs():
    parser = argparse.ArgumentParser(\
        description='SpedeSTEM 2, a STEM wrapper for discovery and validation analysis.', \
        epilog='For additional help see [this website]')

    subparsers = parser.add_subparsers(help='commands', dest='command')

    # discovery analysis mode
    discovery_parser = subparsers.add_parser('discovery', help='discovery analysis')
    discovery_parser.add_argument('-n', '--numtrees', metavar='numTrees', type=int, nargs=1, \
                                  help='number of trees to be sampled from each specified tree file, ' + \
                                  'DEFAULT: 1', default=[1])
    discovery_parser.add_argument('-r', '--runs', metavar='numTimes', type=int, nargs=1, \
                                  help='execute the complete discovery analysis numTimes times,' +
                                  'taking numTimes samples of the tree file, DEFAULT: 1',
                                  default=[1])
    discovery_parser.add_argument('-t', '--trees', metavar='treeFile', nargs='+',
                                  help='specify tree file(s), DEFAULT: genetrees.tre',
                                  default=['genetrees.tre'])
    discovery_parser.add_argument('-b', '--beast', action="store_true", help='read settings file as BEAST format')
    discovery_parser.add_argument('-bt', '--theta', type=float, metavar="thetaValue",
                                  help='set theta value for beast formatted settings files, DEFAULT: 1.0', nargs=1)
    discovery_parser.add_argument('-s', '--settings', metavar='settingsFile', nargs=1, \
                                  help='specify settings file relative path, DEFAULT: settings',
                                  default=['settings'])
    discovery_parser.add_argument('-v', '--verbose', action="store_true", help='execute in verbose mode, DEFAULT: off',
                                   default=False)

    # validation analysis mode
    validation_parser = subparsers.add_parser('validation', help='validation analysis')
    validation_parser.add_argument('-n', '--numtrees', metavar='numTrees', type=int, nargs=1, \
                                  help='number of trees to be sampled from each specified tree file, ' + \
                                  'DEFAULT: 1', default=[1])
    validation_parser.add_argument('-r', '--runs', metavar='numRuns', type=int, nargs=1, \
                                  help='execute the complete validation analysis numTimes times,' +
                                  'taking numTimes samples of the tree file, DEFAULT: 1',
                                  default=[1])
    validation_parser.add_argument('-t', '--trees', metavar='treeFile', nargs='+',
                                  help='specify tree file(s), DEFAULT: genetrees.tre', default=['genetrees.tre'])
    validation_parser.add_argument('-s', '--settings', metavar='settingsFile', nargs=1, \
                                  help='specify settings file relative path, DEFAULT: settings', \
                                  default=['settings'])
    validation_parser.add_argument('-a', '--associations', metavar='associationsFile', nargs=1, \
                                   help='specify associations file relative path, DEFAULT: associations',
                                   default='associations')
    validation_parser.add_argument('-b', '--beast', action="store_true", help='read settings file as BEAST format')
    validation_parser.add_argument('-bt', '--theta', type=float, metavar='thetaValue',
                                   help='set theta value for beast formatted settings files, DEFAULT: 1.0', nargs=1)
    validation_parser.add_argument('-v', '--verbose', action="store_true", help='execute in verbose mode, DEFAULT: off'
                                   , default=False)

    # analysis mode
    subsampling_parser = subparsers.add_parser('analysis', help='talk about analysis')

    # subsampling mode
    subsampling_parser = subparsers.add_parser('subsampling', help='talk about subsampling')

    # testing mode
    testing_parser = subparsers.add_parser('testing', help='power testing')

    # clean tree mode
    cleantree_parser = subparsers.add_parser('cleantrees', help='manipulate tree files')

    # restore
    restore_parser = subparsers.add_parser('restore', help='restore initial configuration, ' + \
                                           'WARNING: all results in project folder will be lost, ' + \
                                           'move files out of this directory to save them.')
    args = parser.parse_args()
    # print args
    return args

def run(args):
    if args.beast:
        if args.theta:
            theta = args.theta
        else:
            theta = 1.0
        buildSettings(args.settings[0], theta)

    if args.command == 'discovery':
        print '---DISCOVERY ANALYSIS---'
        # check here for settings file, tree files, maybe scan the files for correct formatting
        discovery = iterator.Iterator([args.trees], numRuns=args.runs[0], \
                                      numTrees=args.numtrees[0], settings=args.settings[0], maxTrees=args.numtrees[0], \
                                      verbose=args.verbose)
        discovery.printSettings()
        discovery.run()

        # process the stem output
        processor = processStemOut.ProcessStemOut()
        processor.averageOutputByTips()

    elif args.command == 'validation':
        print '---VALIDATION ANALYSIS---'
        # check for settings, tree files, associations, etc.
        validation = iterator.Iterator([args.trees], numRuns=args.runs[0], \
                                      numTrees=args.numtrees[0], settings=args.settings[0], maxTrees=args.numtrees[0], \
                                      verbose=args.verbose, isValidation=True, associations=args.associations)
        validation.printSettings()
        validation.run()

        # process the stem output
        processor = processStemOut.ProcessStemOut()
        processor.averageOutputByTips()
    elif args.command == 'testing':
        print 'Testing...'
    elif args.command == 'restore':
        print 'Restoring...'

def buildSettings(settings, theta):
    parser = parseBeast.ParseBeast(settings, theta)

def main():
    args = parseArgs()
    run(args)


if __name__ == '__main__':
    main()
